---
- name: Deploy binary from GitHub to Raspberry Pi (Legacy Init.d)
  hosts: raspberry_pi
  become: yes
  vars:
    github_release_url: "https://github.com/jatm80/sms-gateway/releases/download/v1.0.1/sms-gateway_1.0.1_linux_armv6"
    binary_dest: "/usr/local/bin/sms-gateway_1.0.1_linux_armv6"
    service_name: "sms-gateway"
    initd_script: "/etc/init.d/{{ service_name }}"
    private_key: "/opt/PRIVATE.key"
    public_cert: "/opt/PUBLIC.pem"
    country: ">>> US <<<"
    state: ">>> New Jersey <<<"
    locality: ">>> GothamCity <<<"
    organization: ">>> jondoe <<<"
    organizational_unit: "None"
    common_name: ">>> sms-bot.example.com <<<"
    email: ">>>> webmaster@example.com <<<"
    env_vars:
      TELEGRAM_TOKEN: ">>> your telegram bot token <<<"
      TELEGRAM_CHAT_ID: ">>> your telegram bot chat id <<<"
      CERT_PATH: "/opt/PUBLIC.pem"
      KEY_PATH: "/opt/PRIVATE.key"

  tasks:
    - name: Ensure OpenSSL is installed
      apt:
        name: openssl
        state: present
      when: ansible_os_family == "Debian"

    - name: Generate SSL certificate
      shell: |
        openssl req -newkey rsa:4096 -sha256 -nodes -keyout {{ private_key }} -x509 -days 365 -out {{ public_cert }} <<EOF
        {{ country }}
        {{ state }}
        {{ locality }}
        {{ organization }}
        {{ organizational_unit }}
        {{ common_name }}
        {{ email }}
        EOF
      args:
        creates: "{{ public_cert }}"

    - name: Ensure the private key file has correct permissions
      file:
        path: "{{ private_key }}"
        owner: root
        group: root
        mode: '0600'

    - name: Ensure the public certificate file has correct permissions
      file:
        path: "{{ public_cert }}"
        owner: root
        group: root
        mode: '0644'

    - name: Download binary release from GitHub
      get_url:
        url: "{{ github_release_url }}"
        dest: "/tmp/sms-gateway_1.0.1_linux_armv6"

    - name: Copy binary to destination
      copy:
        remote_src: true
        src: "/tmp/sms-gateway_1.0.1_linux_armv6"
        dest: "{{ binary_dest }}"

    - name: Set permissions on binary in destination
      file:
        path: "{{ binary_dest }}"
        mode: '0755'  
        
    - name: Create init.d service script
      copy:
        dest: "{{ initd_script }}"
        content: |
          #!/bin/sh
          ### BEGIN INIT INFO
          # Provides:          {{ service_name }}
          # Required-Start:    $remote_fs $syslog
          # Required-Stop:     $remote_fs $syslog
          # Default-Start:     2 3 4 5
          # Default-Stop:      0 1 6
          # Short-Description: Start daemon at boot time
          # Description:       Enable service provided by daemon.
          ### END INIT INFO

          {% for var, value in env_vars.items() %}
          export {{ var }}={{ value }}
          {% endfor %}

          case "$1" in
            start)
              echo "Starting {{ service_name }}"
              {{ binary_dest }} &
              ;;
            stop)
              echo "Stopping {{ service_name }}"
              pkill -f {{ binary_dest }}
              ;;
            restart)
              echo "Restarting {{ service_name }}"
              $0 stop
              $0 start
              ;;
            *)
              echo "Usage: /etc/init.d/{{ service_name }} {start|stop|restart}"
              exit 1
              ;;
          esac

          exit 0

    - name: Set permissions on init.d service script
      file:
        path: "{{ initd_script }}"
        mode: '0755'
      notify: 
        - Restart service

    - name: Enable init.d service to start on boot
      command: update-rc.d {{ service_name }} defaults

  handlers:
    - name: Restart service
      command: "/etc/init.d/{{ service_name }} restart"